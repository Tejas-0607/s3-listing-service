Terraform Deployment for Flask App
Overview
This project demonstrates how to deploy a Flask-based HTTP service to AWS using Terraform. The service exposes an endpoint to list the contents of an S3 bucket, allowing you to retrieve the content at a specified path.

Service Endpoint
Endpoint: GET http://<IP>:<PORT>/list-bucket-content/<path>
Functionality:
Returns the content of the specified S3 bucket path.
If no path is specified, it returns the top-level content of the bucket.
The response is in JSON format.
Architecture Overview
This project uses the following AWS services:

EC2: To host the Flask application.
S3: To store and serve data.
Security Groups: To manage access to EC2 instances.
IAM Role: To allow the EC2 instance to interact with the S3 bucket.
Prerequisites
Before running the Terraform code, ensure you have the following installed:

Terraform: Install Terraform
AWS CLI: Install AWS CLI
Python: Install Python
Flask: Install Flask using pip:

Copy code
pip install flask
Steps to Deploy
1. Clone the repository
Clone the repository to your local machine:


Copy code
git clone https://github.com/your-username/terraform-flask-app.git
cd terraform-flask-app
2. Configure AWS CLI
Ensure you have configured the AWS CLI with your credentials:


Copy code
aws configure
3. Initialize Terraform
Initialize your Terraform configuration:


Copy code
terraform init
4. Apply the Terraform Configuration
Run Terraform to provision the infrastructure:


Copy code
terraform apply
Terraform will prompt you to confirm. Type yes to proceed.

5. Access the Flask Application
Once Terraform completes, it will output the public IP address of the EC2 instance where the Flask app is hosted.

Access the API using your browser or a tool like curl:


Copy code
curl http://<EC2_Public_IP>:<PORT>/list-bucket-content/<path>
Replace <EC2_Public_IP> with the actual IP address and <PORT> with the correct port number (usually 80 for HTTP).


├── main.tf            # Terraform configuration for AWS resources
├── variables.tf       # Terraform variables
├── terraform.tfvars   # Terraform variable values
